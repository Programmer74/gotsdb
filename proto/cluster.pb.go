// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{0}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type PingRequest struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{1}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PingResponse struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{2}
}

func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Node struct {
	ConnectionString     string   `protobuf:"bytes,1,opt,name=connectionString,proto3" json:"connectionString,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{3}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetConnectionString() string {
	if m != nil {
		return m.ConnectionString
	}
	return ""
}

func (m *Node) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type HelloRequest struct {
	Iam                  *Node    `protobuf:"bytes,1,opt,name=iam,proto3" json:"iam,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{4}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetIam() *Node {
	if m != nil {
		return m.Iam
	}
	return nil
}

type AliveNodesResponse struct {
	AliveNodes           []*Node  `protobuf:"bytes,1,rep,name=aliveNodes,proto3" json:"aliveNodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AliveNodesResponse) Reset()         { *m = AliveNodesResponse{} }
func (m *AliveNodesResponse) String() string { return proto.CompactTextString(m) }
func (*AliveNodesResponse) ProtoMessage()    {}
func (*AliveNodesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{5}
}

func (m *AliveNodesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AliveNodesResponse.Unmarshal(m, b)
}
func (m *AliveNodesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AliveNodesResponse.Marshal(b, m, deterministic)
}
func (m *AliveNodesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliveNodesResponse.Merge(m, src)
}
func (m *AliveNodesResponse) XXX_Size() int {
	return xxx_messageInfo_AliveNodesResponse.Size(m)
}
func (m *AliveNodesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AliveNodesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AliveNodesResponse proto.InternalMessageInfo

func (m *AliveNodesResponse) GetAliveNodes() []*Node {
	if m != nil {
		return m.AliveNodes
	}
	return nil
}

func init() {
	proto.RegisterType((*Void)(nil), "proto.void")
	proto.RegisterType((*PingRequest)(nil), "proto.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "proto.PingResponse")
	proto.RegisterType((*Node)(nil), "proto.Node")
	proto.RegisterType((*HelloRequest)(nil), "proto.HelloRequest")
	proto.RegisterType((*AliveNodesResponse)(nil), "proto.AliveNodesResponse")
}

func init() {
	proto.RegisterFile("cluster.proto", fileDescriptor_3cfb3b8ec240c376)
}

var fileDescriptor_3cfb3b8ec240c376 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x51, 0xeb, 0xd3, 0x30,
	0x14, 0xc5, 0x99, 0xff, 0x6e, 0x63, 0xb7, 0x1d, 0x48, 0xc4, 0xd9, 0x55, 0x84, 0xd1, 0x17, 0x87,
	0xe2, 0x84, 0xf9, 0x30, 0xf0, 0x41, 0x18, 0x4e, 0x27, 0x14, 0x64, 0xb4, 0xfb, 0x02, 0xb5, 0xbd,
	0x8c, 0x40, 0x6d, 0x6a, 0x93, 0x06, 0xf7, 0xb9, 0xfc, 0x82, 0xd2, 0x34, 0xe9, 0xba, 0xad, 0xec,
	0xa9, 0xcd, 0xef, 0x9c, 0x7b, 0x72, 0x7a, 0x0b, 0xd3, 0x24, 0xab, 0xb8, 0xc0, 0x72, 0x55, 0x94,
	0x4c, 0x30, 0x32, 0x54, 0x0f, 0x6f, 0x52, 0x16, 0x49, 0x43, 0xfc, 0x11, 0x58, 0x92, 0xd1, 0xd4,
	0x7f, 0x0b, 0xf6, 0x81, 0xe6, 0xa7, 0x10, 0xff, 0x54, 0xc8, 0x05, 0x71, 0x61, 0x5c, 0xc4, 0xe7,
	0x8c, 0xc5, 0xa9, 0x3b, 0x58, 0x0c, 0x96, 0x4e, 0x68, 0x8e, 0xfe, 0x12, 0x9c, 0xc6, 0xc8, 0x0b,
	0x96, 0x73, 0x7c, 0xe0, 0xfc, 0x0e, 0xd6, 0x4f, 0x96, 0x22, 0x79, 0x07, 0xcf, 0x13, 0x96, 0xe7,
	0x98, 0x08, 0xca, 0xf2, 0x48, 0x94, 0x34, 0x3f, 0x29, 0xeb, 0x24, 0xbc, 0xe3, 0x84, 0x80, 0x55,
	0x55, 0x34, 0x75, 0x9f, 0x29, 0x5d, 0xbd, 0xfb, 0x1f, 0xc0, 0xf9, 0x81, 0x59, 0xc6, 0x4c, 0xb7,
	0x37, 0xf0, 0x44, 0xe3, 0xdf, 0x2a, 0xc2, 0x5e, 0xdb, 0xcd, 0x77, 0xac, 0xea, 0x9b, 0xc2, 0x9a,
	0xfb, 0x5b, 0x20, 0xdb, 0x8c, 0x4a, 0xac, 0x09, 0x6f, 0x6b, 0xbe, 0x07, 0x88, 0x5b, 0xea, 0x0e,
	0x16, 0x4f, 0xb7, 0xb3, 0x1d, 0x79, 0xfd, 0xcf, 0x82, 0xf1, 0xd7, 0x66, 0x71, 0xe4, 0x23, 0x58,
	0x07, 0xd5, 0x4c, 0x9b, 0x3b, 0x5b, 0xf2, 0x5e, 0x5c, 0x31, 0x7d, 0xd3, 0x06, 0x86, 0xaa, 0x2e,
	0x31, 0x6a, 0xb7, 0xbc, 0x37, 0xd7, 0xb0, 0xa7, 0xe2, 0x06, 0xa6, 0x7b, 0x14, 0x17, 0x81, 0x98,
	0x7e, 0xf5, 0x0f, 0x7a, 0x34, 0xf8, 0x19, 0xc6, 0x81, 0xe4, 0x51, 0x2c, 0x91, 0xcc, 0xb4, 0xab,
	0x3e, 0x0b, 0x56, 0xa2, 0xb9, 0xf6, 0xd5, 0x1d, 0xd7, 0xb3, 0x7b, 0x70, 0x02, 0xc9, 0x03, 0x3c,
	0x7f, 0xfb, 0x4b, 0xb9, 0xe0, 0xc4, 0xbb, 0x18, 0x5b, 0x68, 0x42, 0x5e, 0xf7, 0x6a, 0x3a, 0x68,
	0x07, 0x76, 0x20, 0x79, 0x88, 0xa2, 0xa4, 0x28, 0x91, 0xcc, 0x2f, 0x5e, 0xc3, 0x4c, 0x8c, 0xd7,
	0x27, 0xe9, 0x94, 0x2f, 0x30, 0x09, 0x24, 0xdf, 0x61, 0x86, 0x02, 0x49, 0xa7, 0x74, 0x43, 0x4c,
	0x82, 0x7b, 0x2f, 0xb4, 0x3b, 0x1c, 0x1d, 0x23, 0xb5, 0x89, 0x97, 0xda, 0x73, 0x8c, 0xae, 0x16,
	0x31, 0xbb, 0xc5, 0x7a, 0x70, 0x0b, 0x70, 0x8c, 0xda, 0xf6, 0x6e, 0xeb, 0xba, 0x2d, 0x3f, 0xef,
	0x51, 0x9a, 0x88, 0x5f, 0x23, 0xa5, 0x7c, 0xfa, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x2e, 0x6f,
	0x7c, 0x74, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*AliveNodesResponse, error)
	GetAliveNodes(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AliveNodesResponse, error)
	KvsSave(ctx context.Context, in *KvsStoreRequest, opts ...grpc.CallOption) (*KvsStoreResponse, error)
	KvsKeyExists(ctx context.Context, in *KvsKeyExistsRequest, opts ...grpc.CallOption) (*KvsKeyExistsResponse, error)
	KvsRetrieve(ctx context.Context, in *KvsRetrieveRequest, opts ...grpc.CallOption) (*KvsRetrieveResponse, error)
	KvsDelete(ctx context.Context, in *KvsDeleteRequest, opts ...grpc.CallOption) (*KvsDeleteResponse, error)
	TSSave(ctx context.Context, in *TSStoreRequest, opts ...grpc.CallOption) (*TSStoreResponse, error)
	TSRetrieve(ctx context.Context, in *TSRetrieveRequest, opts ...grpc.CallOption) (*TSRetrieveResponse, error)
}

type clusterClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterClient(cc grpc.ClientConnInterface) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/proto.Cluster/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*AliveNodesResponse, error) {
	out := new(AliveNodesResponse)
	err := c.cc.Invoke(ctx, "/proto.Cluster/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetAliveNodes(ctx context.Context, in *Void, opts ...grpc.CallOption) (*AliveNodesResponse, error) {
	out := new(AliveNodesResponse)
	err := c.cc.Invoke(ctx, "/proto.Cluster/GetAliveNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) KvsSave(ctx context.Context, in *KvsStoreRequest, opts ...grpc.CallOption) (*KvsStoreResponse, error) {
	out := new(KvsStoreResponse)
	err := c.cc.Invoke(ctx, "/proto.Cluster/KvsSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) KvsKeyExists(ctx context.Context, in *KvsKeyExistsRequest, opts ...grpc.CallOption) (*KvsKeyExistsResponse, error) {
	out := new(KvsKeyExistsResponse)
	err := c.cc.Invoke(ctx, "/proto.Cluster/KvsKeyExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) KvsRetrieve(ctx context.Context, in *KvsRetrieveRequest, opts ...grpc.CallOption) (*KvsRetrieveResponse, error) {
	out := new(KvsRetrieveResponse)
	err := c.cc.Invoke(ctx, "/proto.Cluster/KvsRetrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) KvsDelete(ctx context.Context, in *KvsDeleteRequest, opts ...grpc.CallOption) (*KvsDeleteResponse, error) {
	out := new(KvsDeleteResponse)
	err := c.cc.Invoke(ctx, "/proto.Cluster/KvsDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) TSSave(ctx context.Context, in *TSStoreRequest, opts ...grpc.CallOption) (*TSStoreResponse, error) {
	out := new(TSStoreResponse)
	err := c.cc.Invoke(ctx, "/proto.Cluster/TSSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) TSRetrieve(ctx context.Context, in *TSRetrieveRequest, opts ...grpc.CallOption) (*TSRetrieveResponse, error) {
	out := new(TSRetrieveResponse)
	err := c.cc.Invoke(ctx, "/proto.Cluster/TSRetrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServer is the server API for Cluster service.
type ClusterServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Hello(context.Context, *HelloRequest) (*AliveNodesResponse, error)
	GetAliveNodes(context.Context, *Void) (*AliveNodesResponse, error)
	KvsSave(context.Context, *KvsStoreRequest) (*KvsStoreResponse, error)
	KvsKeyExists(context.Context, *KvsKeyExistsRequest) (*KvsKeyExistsResponse, error)
	KvsRetrieve(context.Context, *KvsRetrieveRequest) (*KvsRetrieveResponse, error)
	KvsDelete(context.Context, *KvsDeleteRequest) (*KvsDeleteResponse, error)
	TSSave(context.Context, *TSStoreRequest) (*TSStoreResponse, error)
	TSRetrieve(context.Context, *TSRetrieveRequest) (*TSRetrieveResponse, error)
}

// UnimplementedClusterServer can be embedded to have forward compatible implementations.
type UnimplementedClusterServer struct {
}

func (*UnimplementedClusterServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedClusterServer) Hello(ctx context.Context, req *HelloRequest) (*AliveNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedClusterServer) GetAliveNodes(ctx context.Context, req *Void) (*AliveNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAliveNodes not implemented")
}
func (*UnimplementedClusterServer) KvsSave(ctx context.Context, req *KvsStoreRequest) (*KvsStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvsSave not implemented")
}
func (*UnimplementedClusterServer) KvsKeyExists(ctx context.Context, req *KvsKeyExistsRequest) (*KvsKeyExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvsKeyExists not implemented")
}
func (*UnimplementedClusterServer) KvsRetrieve(ctx context.Context, req *KvsRetrieveRequest) (*KvsRetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvsRetrieve not implemented")
}
func (*UnimplementedClusterServer) KvsDelete(ctx context.Context, req *KvsDeleteRequest) (*KvsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvsDelete not implemented")
}
func (*UnimplementedClusterServer) TSSave(ctx context.Context, req *TSStoreRequest) (*TSStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSSave not implemented")
}
func (*UnimplementedClusterServer) TSRetrieve(ctx context.Context, req *TSRetrieveRequest) (*TSRetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSRetrieve not implemented")
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetAliveNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetAliveNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/GetAliveNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetAliveNodes(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_KvsSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvsStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).KvsSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/KvsSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).KvsSave(ctx, req.(*KvsStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_KvsKeyExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvsKeyExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).KvsKeyExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/KvsKeyExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).KvsKeyExists(ctx, req.(*KvsKeyExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_KvsRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvsRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).KvsRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/KvsRetrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).KvsRetrieve(ctx, req.(*KvsRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_KvsDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).KvsDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/KvsDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).KvsDelete(ctx, req.(*KvsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_TSSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TSStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).TSSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/TSSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).TSSave(ctx, req.(*TSStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_TSRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TSRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).TSRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cluster/TSRetrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).TSRetrieve(ctx, req.(*TSRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Cluster_Ping_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _Cluster_Hello_Handler,
		},
		{
			MethodName: "GetAliveNodes",
			Handler:    _Cluster_GetAliveNodes_Handler,
		},
		{
			MethodName: "KvsSave",
			Handler:    _Cluster_KvsSave_Handler,
		},
		{
			MethodName: "KvsKeyExists",
			Handler:    _Cluster_KvsKeyExists_Handler,
		},
		{
			MethodName: "KvsRetrieve",
			Handler:    _Cluster_KvsRetrieve_Handler,
		},
		{
			MethodName: "KvsDelete",
			Handler:    _Cluster_KvsDelete_Handler,
		},
		{
			MethodName: "TSSave",
			Handler:    _Cluster_TSSave_Handler,
		},
		{
			MethodName: "TSRetrieve",
			Handler:    _Cluster_TSRetrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
